Supervised Machine Learning: Regression

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt
import os
import sklearn
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# This option ensures that the graphs you create are displayed within the notebook without the need to "call" them specifically.

%matplotlib inline

# define path
path = '/Users/LuisD/Documents/CareerFoundry/Achievement 6/AIR BNB Analysis'

#import
listings = pd.read_csv(os.path.join(path, 'Data', 'Prepared Data', 'listings_complete_cleaned.csv'), index_col = False)

listings.shape

listings.info()

# Drop column
listings = listings.drop(columns=['Unnamed: 0'])

print(listings.isnull().sum())

listings['host_is_superhost'].fillna("f", inplace=True)

# boxplot to visualize extreme values.
plt.figure(figsize=(8, 5))
sns.boxplot(x=listings['price'])
plt.title("Boxplot of Airbnb Prices")
plt.show()

Q1 = listings['price'].quantile(0.25)  # 25th percentile
Q3 = listings['price'].quantile(0.75)  # 75th percentile
IQR = Q3 - Q1  # Interquartile range

# Define outlier bounds
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Find number of outliers
outliers = listings[(listings['price'] < lower_bound) | (listings['price'] > upper_bound)]
print(f"Number of outliers: {len(outliers)}")

# log transformation
listings['log_price'] = np.log1p(listings['price'])  # log1p avoids log(0) errors
sns.histplot(listings['log_price'], bins=50, kde=True)
plt.title("Log-Transformed Price Distribution")
plt.show()

## scatterplot
plt.figure(figsize=(8,5))
sns.scatterplot(x=listings['number_of_reviews'], y=listings['log_price'], alpha=0.5)
plt.title("Number of Reviews vs. Price")
plt.xlabel("Number of Reviews")
plt.ylabel("Price (€)")
plt.show()

## scatterplot
plt.figure(figsize=(8,5))
sns.scatterplot(x=listings['availability_365'], y=listings['log_price'], alpha=0.5)
plt.title("Availability vs. Price")
plt.xlabel("Availability (Days per Year)")
plt.ylabel("Price (€)")
plt.show()

## scatterplot
plt.figure(figsize=(8,5))
sns.scatterplot(x=listings['bedrooms'], y=listings['log_price'], alpha=0.5)
plt.title("Bedrooms vs. Price")
plt.xlabel("Number of Bedrooms")
plt.ylabel("Price (€)")
plt.show()

## boxplot
plt.figure(figsize=(8,5))
sns.boxplot(x=listings['host_is_superhost'], y=listings['log_price'])
plt.title("Superhost Status vs. Price")
plt.xlabel("Superhost")
plt.ylabel("Price (€)")
plt.show()

## Reshape the variables into NumPy arrays, with X (availability_365) being the independent variable and y (price)being the dependent variable


# Select independent variables (X) and dependent variable (y)
X = listings[['availability_365', 'number_of_reviews']]
y = listings['log_price']

# Convert to NumPy arrays
X = np.array(X)
y = np.array(y)

# Split dataset into 80% training and 20% testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and fit the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Print coefficients
print(f"Intercept: {model.intercept_}")
print(f"Coefficients: {model.coef_}")  # Shows impact of 'availability_365' and 'number_of_reviews' on price

# Predict on test set
y_pred = model.predict(X_test)

from sklearn.metrics import mean_absolute_error

# Calculate R-squared and Mean Absolute Error (MAE)
r2 = r2_score(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)

print(f"R-squared: {r2:.2f}")
print(f"Mean Absolute Error: {mae:.2f}")

# Scatter plot of actual vs. predicted values
plt.figure(figsize=(8,5))
plt.scatter(X_test[:, 0], y_test, color="blue", alpha=0.5, label="Actual Prices")  # availability_365 vs actual price
plt.scatter(X_test[:, 0], y_pred, color="red", alpha=0.5, label="Predicted Prices")  # availability_365 vs predicted price

# Plot regression line
sorted_indices = np.argsort(X_test[:, 0])
plt.plot(X_test[:, 0][sorted_indices], y_pred[sorted_indices], color="black", linewidth=2, label="Regression Line")

plt.xlabel("Availability (Days per Year)")
plt.ylabel("Price (€)")
plt.title("Regression: Availability vs. Price")
plt.legend()
plt.show()

# Check the model performance statistics—MSE and R2 score.
# Calculate Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)

# Calculate R² Score
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R² Score: {r2:.4f}")  # More decimal places for accuracy

# Create a DataFrame to compare actual and predicted prices
comparison_df = pd.DataFrame({'Actual Price': y_test, 'Predicted Price': y_pred})

# Display the first 10 rows for a quick check
print(comparison_df.head(10))

listings.to_csv(os.path.join(path, 'Data','Prepared Data', 'listings_complete_6_4.csv'))



