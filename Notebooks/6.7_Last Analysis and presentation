{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c82b03d2-5f2a-4dc5-bfa7-ae40948b098e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Final Analysis "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a942e75e-9c79-4ce1-9b69-a34677bfc1b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import data and libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib\n",
    "import os\n",
    "import folium\n",
    "import json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "09c6f102-c5d2-42cb-ac69-e3eabe815e56",
   "metadata": {},
   "outputs": [],
   "source": [
    "# This command propts matplotlib visuals to appear in the notebook \n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9582ff11-5553-425e-b872-26de335be8f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# define path\n",
    "path = '/Users/LuisD/Documents/CareerFoundry/Achievement 6/AIR BNB Analysis'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "342a8f9d-2b7d-47f6-b7d4-ca08c23b10c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import\n",
    "listings = pd.read_csv(os.path.join(path, 'Data', 'Prepared Data', 'listings_complete_cleaned.csv'), index_col = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b07260a4-6f74-479d-b86c-cb8f60ceca46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(20030, 15)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "listings.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f613a389-147e-426c-9fb7-2670dc2fe5b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 20030 entries, 0 to 20029\n",
      "Data columns (total 15 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Unnamed: 0         20030 non-null  int64  \n",
      " 1   id                 20030 non-null  int64  \n",
      " 2   name               20030 non-null  object \n",
      " 3   neighbourhood      20030 non-null  object \n",
      " 4   room_type          20030 non-null  object \n",
      " 5   price              20030 non-null  int64  \n",
      " 6   number_of_reviews  20030 non-null  int64  \n",
      " 7   reviews_per_month  20030 non-null  float64\n",
      " 8   availability_365   20030 non-null  int64  \n",
      " 9   host_is_superhost  20026 non-null  object \n",
      " 10  property_type      20030 non-null  object \n",
      " 11  bedrooms           20030 non-null  int64  \n",
      " 12  security_deposit   20030 non-null  float64\n",
      " 13  cleaning_fee       20030 non-null  float64\n",
      " 14  Price category     20030 non-null  object \n",
      "dtypes: float64(3), int64(6), object(6)\n",
      "memory usage: 2.3+ MB\n"
     ]
    }
   ],
   "source": [
    "listings.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "02fa737a-a512-4b6d-ba90-1bf6808afb50",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop column\n",
    "listings = listings.drop(columns=['Unnamed: 0'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ce0d872e-6f06-4a10-a008-5271b0f55c4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from folium.plugins import HeatMap\n",
    "from folium import Choropleth"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "20089ba3-dcaf-4916-b948-b2d704afeae6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import geopandas as gpd\n",
    "\n",
    "# Load the GeoJSON file as a GeoDataFrame\n",
    "country_geo = gpd.read_file('/Users/LuisD/Documents/CareerFoundry/Achievement 6/AIR BNB Analysis/Data/Original Data/neighbourhoods.geojson')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "6fbbebf2-e4df-49b1-9dfa-52f9f47e0d2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>neighbourhood</th>\n",
       "      <th>neighbourhood_group</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bijlmer-Oost</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.99167 52.32444 43.06929, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Noord-Oost</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((5.07916 52.38865 42.95663, 5...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Noord-West</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.93072 52.41161 42.91539, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Oud-Noord</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.95242 52.38983 42.95411, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IJburg - Zeeburgereiland</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((5.03906 52.35458 43.01664, 5...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Centrum-West</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.9064 52.38004 42.97078, 4....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Oostelijk Havengebied - Indische Buurt</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.96131 52.35913 43.00824, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Centrum-Oost</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.93297 52.37041 42.9881, 4....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Oud-Oost</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.93743 52.35774 43.01043, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Watergraafsmeer</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.96971 52.35636 43.01317, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Gaasperdam - Driemond</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((5.02154 52.30246 43.10781, 5...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Westerpark</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.89508 52.38869 42.95535, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Bijlmer-Centrum</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.97184 52.28436 43.13905, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>De Pijp - Rivierenbuurt</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.91498 52.34214 43.0375, 4....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Zuid</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.88738 52.36023 43.00532, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Buitenveldert - Zuidas</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.89907 52.33044 43.05777, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>De Baarsjes - Oud-West</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.88209 52.36206 43.00202, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Bos en Lommer</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.86496 52.38896 42.95433, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Geuzenveld - Slotermeer</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.83945 52.38404 42.96248, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Slotervaart</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.85049 52.36424 42.99758, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Osdorp</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.82043 52.35174 43.01884, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>De Aker - Nieuw Sloten</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.84713 52.3369 43.04548, 4....</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             neighbourhood neighbourhood_group  \\\n",
       "0                             Bijlmer-Oost                None   \n",
       "1                               Noord-Oost                None   \n",
       "2                               Noord-West                None   \n",
       "3                                Oud-Noord                None   \n",
       "4                 IJburg - Zeeburgereiland                None   \n",
       "5                             Centrum-West                None   \n",
       "6   Oostelijk Havengebied - Indische Buurt                None   \n",
       "7                             Centrum-Oost                None   \n",
       "8                                 Oud-Oost                None   \n",
       "9                          Watergraafsmeer                None   \n",
       "10                   Gaasperdam - Driemond                None   \n",
       "11                              Westerpark                None   \n",
       "12                         Bijlmer-Centrum                None   \n",
       "13                 De Pijp - Rivierenbuurt                None   \n",
       "14                                    Zuid                None   \n",
       "15                  Buitenveldert - Zuidas                None   \n",
       "16                  De Baarsjes - Oud-West                None   \n",
       "17                           Bos en Lommer                None   \n",
       "18                 Geuzenveld - Slotermeer                None   \n",
       "19                             Slotervaart                None   \n",
       "20                                  Osdorp                None   \n",
       "21                  De Aker - Nieuw Sloten                None   \n",
       "\n",
       "                                             geometry  \n",
       "0   MULTIPOLYGON Z (((4.99167 52.32444 43.06929, 4...  \n",
       "1   MULTIPOLYGON Z (((5.07916 52.38865 42.95663, 5...  \n",
       "2   MULTIPOLYGON Z (((4.93072 52.41161 42.91539, 4...  \n",
       "3   MULTIPOLYGON Z (((4.95242 52.38983 42.95411, 4...  \n",
       "4   MULTIPOLYGON Z (((5.03906 52.35458 43.01664, 5...  \n",
       "5   MULTIPOLYGON Z (((4.9064 52.38004 42.97078, 4....  \n",
       "6   MULTIPOLYGON Z (((4.96131 52.35913 43.00824, 4...  \n",
       "7   MULTIPOLYGON Z (((4.93297 52.37041 42.9881, 4....  \n",
       "8   MULTIPOLYGON Z (((4.93743 52.35774 43.01043, 4...  \n",
       "9   MULTIPOLYGON Z (((4.96971 52.35636 43.01317, 4...  \n",
       "10  MULTIPOLYGON Z (((5.02154 52.30246 43.10781, 5...  \n",
       "11  MULTIPOLYGON Z (((4.89508 52.38869 42.95535, 4...  \n",
       "12  MULTIPOLYGON Z (((4.97184 52.28436 43.13905, 4...  \n",
       "13  MULTIPOLYGON Z (((4.91498 52.34214 43.0375, 4....  \n",
       "14  MULTIPOLYGON Z (((4.88738 52.36023 43.00532, 4...  \n",
       "15  MULTIPOLYGON Z (((4.89907 52.33044 43.05777, 4...  \n",
       "16  MULTIPOLYGON Z (((4.88209 52.36206 43.00202, 4...  \n",
       "17  MULTIPOLYGON Z (((4.86496 52.38896 42.95433, 4...  \n",
       "18  MULTIPOLYGON Z (((4.83945 52.38404 42.96248, 4...  \n",
       "19  MULTIPOLYGON Z (((4.85049 52.36424 42.99758, 4...  \n",
       "20  MULTIPOLYGON Z (((4.82043 52.35174 43.01884, 4...  \n",
       "21  MULTIPOLYGON Z (((4.84713 52.3369 43.04548, 4....  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "country_geo\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f61fe0cf-9651-48bd-8afe-d1836bc1a68c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Standardize 'neighbourhood' columns in both dataframes\n",
    "listings['neighbourhood'] = listings['neighbourhood'].str.strip().str.lower()\n",
    "country_geo['neighbourhood'] = country_geo['neighbourhood'].str.strip().str.lower()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49bc7a3a-061f-4f36-810b-6c23862c1786",
   "metadata": {},
   "source": [
    "### Merge the listings DataFrame with the country_geo GeoDataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9005b632-6558-479b-8d96-3fa4a0a31401",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merge the listings DataFrame with the country_geo GeoDataFrame\n",
    "merged_df = listings.merge(country_geo, on='neighbourhood', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "3c5c36fe-94dc-4356-8587-b0d7c65139f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>name</th>\n",
       "      <th>neighbourhood</th>\n",
       "      <th>room_type</th>\n",
       "      <th>price</th>\n",
       "      <th>number_of_reviews</th>\n",
       "      <th>reviews_per_month</th>\n",
       "      <th>availability_365</th>\n",
       "      <th>host_is_superhost</th>\n",
       "      <th>property_type</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>security_deposit</th>\n",
       "      <th>cleaning_fee</th>\n",
       "      <th>Price category</th>\n",
       "      <th>neighbourhood_group</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2818</td>\n",
       "      <td>Quiet Garden View Room &amp; Super Fast WiFi</td>\n",
       "      <td>oostelijk havengebied - indische buurt</td>\n",
       "      <td>Private room</td>\n",
       "      <td>59</td>\n",
       "      <td>248</td>\n",
       "      <td>2.10</td>\n",
       "      <td>44</td>\n",
       "      <td>t</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>Low price</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.96131 52.35913 43.00824, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3209</td>\n",
       "      <td>Quiet apt near center, great view</td>\n",
       "      <td>westerpark</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>160</td>\n",
       "      <td>42</td>\n",
       "      <td>1.03</td>\n",
       "      <td>47</td>\n",
       "      <td>f</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>2</td>\n",
       "      <td>300.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>Low price</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.89508 52.38869 42.95535, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20168</td>\n",
       "      <td>100%Centre-Studio 1 Private Floor/Bathroom</td>\n",
       "      <td>centrum-oost</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>80</td>\n",
       "      <td>233</td>\n",
       "      <td>2.18</td>\n",
       "      <td>198</td>\n",
       "      <td>f</td>\n",
       "      <td>Townhouse</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Low price</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.93297 52.37041 42.9881, 4....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>25428</td>\n",
       "      <td>Lovely apt in City Centre (Jordaan)</td>\n",
       "      <td>centrum-west</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>125</td>\n",
       "      <td>1</td>\n",
       "      <td>0.09</td>\n",
       "      <td>141</td>\n",
       "      <td>f</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>1</td>\n",
       "      <td>300.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>Low price</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.9064 52.38004 42.97078, 4....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>27886</td>\n",
       "      <td>Romantic, stylish B&amp;B houseboat in canal district</td>\n",
       "      <td>centrum-west</td>\n",
       "      <td>Private room</td>\n",
       "      <td>150</td>\n",
       "      <td>171</td>\n",
       "      <td>2.03</td>\n",
       "      <td>199</td>\n",
       "      <td>t</td>\n",
       "      <td>Houseboat</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Low price</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.9064 52.38004 42.97078, 4....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20025</th>\n",
       "      <td>30576148</td>\n",
       "      <td>Family House City + free Parking+garden (160 m2)</td>\n",
       "      <td>watergraafsmeer</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>340</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>11</td>\n",
       "      <td>f</td>\n",
       "      <td>House</td>\n",
       "      <td>3</td>\n",
       "      <td>500.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Middle price</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.96971 52.35636 43.01317, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20026</th>\n",
       "      <td>30577727</td>\n",
       "      <td>Home Sweet Home in Indische Buurt</td>\n",
       "      <td>oostelijk havengebied - indische buurt</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>150</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>16</td>\n",
       "      <td>f</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>Low price</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.96131 52.35913 43.00824, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20027</th>\n",
       "      <td>30578037</td>\n",
       "      <td>Amsterdam Cozy apartment nearby center</td>\n",
       "      <td>oud-oost</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>210</td>\n",
       "      <td>f</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Low price</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.93743 52.35774 43.01043, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20028</th>\n",
       "      <td>30579673</td>\n",
       "      <td>Home Sweet Home for a Guest or a Couple</td>\n",
       "      <td>oostelijk havengebied - indische buurt</td>\n",
       "      <td>Private room</td>\n",
       "      <td>55</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>31</td>\n",
       "      <td>f</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Low price</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.96131 52.35913 43.00824, 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20029</th>\n",
       "      <td>30580413</td>\n",
       "      <td>Cosy two bedroom appartment near 'de Pijp'!</td>\n",
       "      <td>de pijp - rivierenbuurt</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>220</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>14</td>\n",
       "      <td>f</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>Middle price</td>\n",
       "      <td>None</td>\n",
       "      <td>MULTIPOLYGON Z (((4.91498 52.34214 43.0375, 4....</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20030 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             id                                               name  \\\n",
       "0          2818           Quiet Garden View Room & Super Fast WiFi   \n",
       "1          3209                  Quiet apt near center, great view   \n",
       "2         20168         100%Centre-Studio 1 Private Floor/Bathroom   \n",
       "3         25428                Lovely apt in City Centre (Jordaan)   \n",
       "4         27886  Romantic, stylish B&B houseboat in canal district   \n",
       "...         ...                                                ...   \n",
       "20025  30576148   Family House City + free Parking+garden (160 m2)   \n",
       "20026  30577727                  Home Sweet Home in Indische Buurt   \n",
       "20027  30578037             Amsterdam Cozy apartment nearby center   \n",
       "20028  30579673            Home Sweet Home for a Guest or a Couple   \n",
       "20029  30580413        Cosy two bedroom appartment near 'de Pijp'!   \n",
       "\n",
       "                                neighbourhood        room_type  price  \\\n",
       "0      oostelijk havengebied - indische buurt     Private room     59   \n",
       "1                                  westerpark  Entire home/apt    160   \n",
       "2                                centrum-oost  Entire home/apt     80   \n",
       "3                                centrum-west  Entire home/apt    125   \n",
       "4                                centrum-west     Private room    150   \n",
       "...                                       ...              ...    ...   \n",
       "20025                         watergraafsmeer  Entire home/apt    340   \n",
       "20026  oostelijk havengebied - indische buurt  Entire home/apt    150   \n",
       "20027                                oud-oost  Entire home/apt     80   \n",
       "20028  oostelijk havengebied - indische buurt     Private room     55   \n",
       "20029                 de pijp - rivierenbuurt  Entire home/apt    220   \n",
       "\n",
       "       number_of_reviews  reviews_per_month  availability_365  \\\n",
       "0                    248               2.10                44   \n",
       "1                     42               1.03                47   \n",
       "2                    233               2.18               198   \n",
       "3                      1               0.09               141   \n",
       "4                    171               2.03               199   \n",
       "...                  ...                ...               ...   \n",
       "20025                  0               0.00                11   \n",
       "20026                  0               0.00                16   \n",
       "20027                  0               0.00               210   \n",
       "20028                  0               0.00                31   \n",
       "20029                  0               0.00                14   \n",
       "\n",
       "      host_is_superhost property_type  bedrooms  security_deposit  \\\n",
       "0                     t     Apartment         1             100.0   \n",
       "1                     f     Apartment         2             300.0   \n",
       "2                     f     Townhouse         1               0.0   \n",
       "3                     f     Apartment         1             300.0   \n",
       "4                     t     Houseboat         1               0.0   \n",
       "...                 ...           ...       ...               ...   \n",
       "20025                 f         House         3             500.0   \n",
       "20026                 f     Apartment         2               0.0   \n",
       "20027                 f     Apartment         1               0.0   \n",
       "20028                 f     Apartment         1               0.0   \n",
       "20029                 f     Apartment         2               0.0   \n",
       "\n",
       "       cleaning_fee Price category neighbourhood_group  \\\n",
       "0              50.0      Low price                None   \n",
       "1              40.0      Low price                None   \n",
       "2               0.0      Low price                None   \n",
       "3              40.0      Low price                None   \n",
       "4               0.0      Low price                None   \n",
       "...             ...            ...                 ...   \n",
       "20025          60.0   Middle price                None   \n",
       "20026          25.0      Low price                None   \n",
       "20027           0.0      Low price                None   \n",
       "20028           0.0      Low price                None   \n",
       "20029          30.0   Middle price                None   \n",
       "\n",
       "                                                geometry  \n",
       "0      MULTIPOLYGON Z (((4.96131 52.35913 43.00824, 4...  \n",
       "1      MULTIPOLYGON Z (((4.89508 52.38869 42.95535, 4...  \n",
       "2      MULTIPOLYGON Z (((4.93297 52.37041 42.9881, 4....  \n",
       "3      MULTIPOLYGON Z (((4.9064 52.38004 42.97078, 4....  \n",
       "4      MULTIPOLYGON Z (((4.9064 52.38004 42.97078, 4....  \n",
       "...                                                  ...  \n",
       "20025  MULTIPOLYGON Z (((4.96971 52.35636 43.01317, 4...  \n",
       "20026  MULTIPOLYGON Z (((4.96131 52.35913 43.00824, 4...  \n",
       "20027  MULTIPOLYGON Z (((4.93743 52.35774 43.01043, 4...  \n",
       "20028  MULTIPOLYGON Z (((4.96131 52.35913 43.00824, 4...  \n",
       "20029  MULTIPOLYGON Z (((4.91498 52.34214 43.0375, 4....  \n",
       "\n",
       "[20030 rows x 16 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "fcfaaab7-b2b3-4c7e-8c4f-a67d31abaebd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the merged data to a CSV file\n",
    "merged_df.to_csv('merged_listings_with_geo.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e4e6b063-20b6-4d25-9544-352c2ef67218",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert the geometry to WKT (Well-Known Text) format for compatibility with Tableau\n",
    "country_geo['geometry_wkt'] = country_geo['geometry'].apply(lambda geom: geom.wkt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "4502f647-90a8-46a3-9b82-43829d495d13",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merge the listings DataFrame with the country_geo GeoDataFrame on 'neighbourhood'\n",
    "merged_df = listings.merge(country_geo[['neighbourhood', 'geometry_wkt']], on='neighbourhood', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "f92ea425-245c-4ce8-bf37-d4e83fe68a57",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the merged data to a CSV file for Tableau\n",
    "merged_df.to_csv('merged_listings_with_geometry.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "2822cd55-c690-4609-a771-06eb65c34bae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 20030 entries, 0 to 20029\n",
      "Data columns (total 15 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   id                 20030 non-null  int64  \n",
      " 1   name               20030 non-null  object \n",
      " 2   neighbourhood      20030 non-null  object \n",
      " 3   room_type          20030 non-null  object \n",
      " 4   price              20030 non-null  int64  \n",
      " 5   number_of_reviews  20030 non-null  int64  \n",
      " 6   reviews_per_month  20030 non-null  float64\n",
      " 7   availability_365   20030 non-null  int64  \n",
      " 8   host_is_superhost  20026 non-null  object \n",
      " 9   property_type      20030 non-null  object \n",
      " 10  bedrooms           20030 non-null  int64  \n",
      " 11  security_deposit   20030 non-null  float64\n",
      " 12  cleaning_fee       20030 non-null  float64\n",
      " 13  Price category     20030 non-null  object \n",
      " 14  geometry_wkt       20030 non-null  object \n",
      "dtypes: float64(3), int64(5), object(7)\n",
      "memory usage: 2.3+ MB\n"
     ]
    }
   ],
   "source": [
    "merged_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "95791312-a252-46dc-a73f-890716b88359",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Subset the DataFrame to keep only the relevant columns for the heat map\n",
    "subset_df = merged_df[['id', 'neighbourhood', 'price', 'geometry_wkt']]\n",
    "\n",
    "# Save the subsetted DataFrame to a CSV\n",
    "subset_df.to_csv('subset_merged_df.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "db09f764-d3df-45c9-8c99-f5793ffe7fcf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop rows with missing 'neighbourhood' or 'price'\n",
    "subset_df = subset_df.dropna(subset=['neighbourhood', 'price'])\n",
    "\n",
    "# Save again after cleaning\n",
    "subset_df.to_csv('cleaned_subset_merged_df.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "6a5e14b3-cf26-4fed-9246-a69d6829918e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>neighbourhood</th>\n",
       "      <th>price</th>\n",
       "      <th>geometry_wkt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2818</td>\n",
       "      <td>oostelijk havengebied - indische buurt</td>\n",
       "      <td>59</td>\n",
       "      <td>MULTIPOLYGON Z (((4.961306 52.359131 43.008235...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3209</td>\n",
       "      <td>westerpark</td>\n",
       "      <td>160</td>\n",
       "      <td>MULTIPOLYGON Z (((4.895078 52.388691 42.955352...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20168</td>\n",
       "      <td>centrum-oost</td>\n",
       "      <td>80</td>\n",
       "      <td>MULTIPOLYGON Z (((4.932968 52.370406 42.988103...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>25428</td>\n",
       "      <td>centrum-west</td>\n",
       "      <td>125</td>\n",
       "      <td>MULTIPOLYGON Z (((4.906404 52.38004 42.970779,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>27886</td>\n",
       "      <td>centrum-west</td>\n",
       "      <td>150</td>\n",
       "      <td>MULTIPOLYGON Z (((4.906404 52.38004 42.970779,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20025</th>\n",
       "      <td>30576148</td>\n",
       "      <td>watergraafsmeer</td>\n",
       "      <td>340</td>\n",
       "      <td>MULTIPOLYGON Z (((4.969713 52.356363 43.013172...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20026</th>\n",
       "      <td>30577727</td>\n",
       "      <td>oostelijk havengebied - indische buurt</td>\n",
       "      <td>150</td>\n",
       "      <td>MULTIPOLYGON Z (((4.961306 52.359131 43.008235...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20027</th>\n",
       "      <td>30578037</td>\n",
       "      <td>oud-oost</td>\n",
       "      <td>80</td>\n",
       "      <td>MULTIPOLYGON Z (((4.937427 52.357739 43.010426...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20028</th>\n",
       "      <td>30579673</td>\n",
       "      <td>oostelijk havengebied - indische buurt</td>\n",
       "      <td>55</td>\n",
       "      <td>MULTIPOLYGON Z (((4.961306 52.359131 43.008235...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20029</th>\n",
       "      <td>30580413</td>\n",
       "      <td>de pijp - rivierenbuurt</td>\n",
       "      <td>220</td>\n",
       "      <td>MULTIPOLYGON Z (((4.914985 52.342145 43.037497...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20030 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             id                           neighbourhood  price  \\\n",
       "0          2818  oostelijk havengebied - indische buurt     59   \n",
       "1          3209                              westerpark    160   \n",
       "2         20168                            centrum-oost     80   \n",
       "3         25428                            centrum-west    125   \n",
       "4         27886                            centrum-west    150   \n",
       "...         ...                                     ...    ...   \n",
       "20025  30576148                         watergraafsmeer    340   \n",
       "20026  30577727  oostelijk havengebied - indische buurt    150   \n",
       "20027  30578037                                oud-oost     80   \n",
       "20028  30579673  oostelijk havengebied - indische buurt     55   \n",
       "20029  30580413                 de pijp - rivierenbuurt    220   \n",
       "\n",
       "                                            geometry_wkt  \n",
       "0      MULTIPOLYGON Z (((4.961306 52.359131 43.008235...  \n",
       "1      MULTIPOLYGON Z (((4.895078 52.388691 42.955352...  \n",
       "2      MULTIPOLYGON Z (((4.932968 52.370406 42.988103...  \n",
       "3      MULTIPOLYGON Z (((4.906404 52.38004 42.970779,...  \n",
       "4      MULTIPOLYGON Z (((4.906404 52.38004 42.970779,...  \n",
       "...                                                  ...  \n",
       "20025  MULTIPOLYGON Z (((4.969713 52.356363 43.013172...  \n",
       "20026  MULTIPOLYGON Z (((4.961306 52.359131 43.008235...  \n",
       "20027  MULTIPOLYGON Z (((4.937427 52.357739 43.010426...  \n",
       "20028  MULTIPOLYGON Z (((4.961306 52.359131 43.008235...  \n",
       "20029  MULTIPOLYGON Z (((4.914985 52.342145 43.037497...  \n",
       "\n",
       "[20030 rows x 4 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subset_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "1a94253b-2725-4db4-853a-8e04d8660fcb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>name</th>\n",
       "      <th>neighbourhood</th>\n",
       "      <th>room_type</th>\n",
       "      <th>price</th>\n",
       "      <th>number_of_reviews</th>\n",
       "      <th>reviews_per_month</th>\n",
       "      <th>availability_365</th>\n",
       "      <th>host_is_superhost</th>\n",
       "      <th>property_type</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>security_deposit</th>\n",
       "      <th>cleaning_fee</th>\n",
       "      <th>Price category</th>\n",
       "      <th>geometry_wkt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2818</td>\n",
       "      <td>Quiet Garden View Room &amp; Super Fast WiFi</td>\n",
       "      <td>oostelijk havengebied - indische buurt</td>\n",
       "      <td>Private room</td>\n",
       "      <td>59</td>\n",
       "      <td>248</td>\n",
       "      <td>2.10</td>\n",
       "      <td>44</td>\n",
       "      <td>t</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>1</td>\n",
       "      <td>100.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>Low price</td>\n",
       "      <td>MULTIPOLYGON Z (((4.961306 52.359131 43.008235...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3209</td>\n",
       "      <td>Quiet apt near center, great view</td>\n",
       "      <td>westerpark</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>160</td>\n",
       "      <td>42</td>\n",
       "      <td>1.03</td>\n",
       "      <td>47</td>\n",
       "      <td>f</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>2</td>\n",
       "      <td>300.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>Low price</td>\n",
       "      <td>MULTIPOLYGON Z (((4.895078 52.388691 42.955352...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>20168</td>\n",
       "      <td>100%Centre-Studio 1 Private Floor/Bathroom</td>\n",
       "      <td>centrum-oost</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>80</td>\n",
       "      <td>233</td>\n",
       "      <td>2.18</td>\n",
       "      <td>198</td>\n",
       "      <td>f</td>\n",
       "      <td>Townhouse</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Low price</td>\n",
       "      <td>MULTIPOLYGON Z (((4.932968 52.370406 42.988103...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>25428</td>\n",
       "      <td>Lovely apt in City Centre (Jordaan)</td>\n",
       "      <td>centrum-west</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>125</td>\n",
       "      <td>1</td>\n",
       "      <td>0.09</td>\n",
       "      <td>141</td>\n",
       "      <td>f</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>1</td>\n",
       "      <td>300.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>Low price</td>\n",
       "      <td>MULTIPOLYGON Z (((4.906404 52.38004 42.970779,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>27886</td>\n",
       "      <td>Romantic, stylish B&amp;B houseboat in canal district</td>\n",
       "      <td>centrum-west</td>\n",
       "      <td>Private room</td>\n",
       "      <td>150</td>\n",
       "      <td>171</td>\n",
       "      <td>2.03</td>\n",
       "      <td>199</td>\n",
       "      <td>t</td>\n",
       "      <td>Houseboat</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Low price</td>\n",
       "      <td>MULTIPOLYGON Z (((4.906404 52.38004 42.970779,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20025</th>\n",
       "      <td>30576148</td>\n",
       "      <td>Family House City + free Parking+garden (160 m2)</td>\n",
       "      <td>watergraafsmeer</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>340</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>11</td>\n",
       "      <td>f</td>\n",
       "      <td>House</td>\n",
       "      <td>3</td>\n",
       "      <td>500.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>Middle price</td>\n",
       "      <td>MULTIPOLYGON Z (((4.969713 52.356363 43.013172...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20026</th>\n",
       "      <td>30577727</td>\n",
       "      <td>Home Sweet Home in Indische Buurt</td>\n",
       "      <td>oostelijk havengebied - indische buurt</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>150</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>16</td>\n",
       "      <td>f</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>Low price</td>\n",
       "      <td>MULTIPOLYGON Z (((4.961306 52.359131 43.008235...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20027</th>\n",
       "      <td>30578037</td>\n",
       "      <td>Amsterdam Cozy apartment nearby center</td>\n",
       "      <td>oud-oost</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>210</td>\n",
       "      <td>f</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Low price</td>\n",
       "      <td>MULTIPOLYGON Z (((4.937427 52.357739 43.010426...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20028</th>\n",
       "      <td>30579673</td>\n",
       "      <td>Home Sweet Home for a Guest or a Couple</td>\n",
       "      <td>oostelijk havengebied - indische buurt</td>\n",
       "      <td>Private room</td>\n",
       "      <td>55</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>31</td>\n",
       "      <td>f</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Low price</td>\n",
       "      <td>MULTIPOLYGON Z (((4.961306 52.359131 43.008235...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20029</th>\n",
       "      <td>30580413</td>\n",
       "      <td>Cosy two bedroom appartment near 'de Pijp'!</td>\n",
       "      <td>de pijp - rivierenbuurt</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>220</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>14</td>\n",
       "      <td>f</td>\n",
       "      <td>Apartment</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>Middle price</td>\n",
       "      <td>MULTIPOLYGON Z (((4.914985 52.342145 43.037497...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20030 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             id                                               name  \\\n",
       "0          2818           Quiet Garden View Room & Super Fast WiFi   \n",
       "1          3209                  Quiet apt near center, great view   \n",
       "2         20168         100%Centre-Studio 1 Private Floor/Bathroom   \n",
       "3         25428                Lovely apt in City Centre (Jordaan)   \n",
       "4         27886  Romantic, stylish B&B houseboat in canal district   \n",
       "...         ...                                                ...   \n",
       "20025  30576148   Family House City + free Parking+garden (160 m2)   \n",
       "20026  30577727                  Home Sweet Home in Indische Buurt   \n",
       "20027  30578037             Amsterdam Cozy apartment nearby center   \n",
       "20028  30579673            Home Sweet Home for a Guest or a Couple   \n",
       "20029  30580413        Cosy two bedroom appartment near 'de Pijp'!   \n",
       "\n",
       "                                neighbourhood        room_type  price  \\\n",
       "0      oostelijk havengebied - indische buurt     Private room     59   \n",
       "1                                  westerpark  Entire home/apt    160   \n",
       "2                                centrum-oost  Entire home/apt     80   \n",
       "3                                centrum-west  Entire home/apt    125   \n",
       "4                                centrum-west     Private room    150   \n",
       "...                                       ...              ...    ...   \n",
       "20025                         watergraafsmeer  Entire home/apt    340   \n",
       "20026  oostelijk havengebied - indische buurt  Entire home/apt    150   \n",
       "20027                                oud-oost  Entire home/apt     80   \n",
       "20028  oostelijk havengebied - indische buurt     Private room     55   \n",
       "20029                 de pijp - rivierenbuurt  Entire home/apt    220   \n",
       "\n",
       "       number_of_reviews  reviews_per_month  availability_365  \\\n",
       "0                    248               2.10                44   \n",
       "1                     42               1.03                47   \n",
       "2                    233               2.18               198   \n",
       "3                      1               0.09               141   \n",
       "4                    171               2.03               199   \n",
       "...                  ...                ...               ...   \n",
       "20025                  0               0.00                11   \n",
       "20026                  0               0.00                16   \n",
       "20027                  0               0.00               210   \n",
       "20028                  0               0.00                31   \n",
       "20029                  0               0.00                14   \n",
       "\n",
       "      host_is_superhost property_type  bedrooms  security_deposit  \\\n",
       "0                     t     Apartment         1             100.0   \n",
       "1                     f     Apartment         2             300.0   \n",
       "2                     f     Townhouse         1               0.0   \n",
       "3                     f     Apartment         1             300.0   \n",
       "4                     t     Houseboat         1               0.0   \n",
       "...                 ...           ...       ...               ...   \n",
       "20025                 f         House         3             500.0   \n",
       "20026                 f     Apartment         2               0.0   \n",
       "20027                 f     Apartment         1               0.0   \n",
       "20028                 f     Apartment         1               0.0   \n",
       "20029                 f     Apartment         2               0.0   \n",
       "\n",
       "       cleaning_fee Price category  \\\n",
       "0              50.0      Low price   \n",
       "1              40.0      Low price   \n",
       "2               0.0      Low price   \n",
       "3              40.0      Low price   \n",
       "4               0.0      Low price   \n",
       "...             ...            ...   \n",
       "20025          60.0   Middle price   \n",
       "20026          25.0      Low price   \n",
       "20027           0.0      Low price   \n",
       "20028           0.0      Low price   \n",
       "20029          30.0   Middle price   \n",
       "\n",
       "                                            geometry_wkt  \n",
       "0      MULTIPOLYGON Z (((4.961306 52.359131 43.008235...  \n",
       "1      MULTIPOLYGON Z (((4.895078 52.388691 42.955352...  \n",
       "2      MULTIPOLYGON Z (((4.932968 52.370406 42.988103...  \n",
       "3      MULTIPOLYGON Z (((4.906404 52.38004 42.970779,...  \n",
       "4      MULTIPOLYGON Z (((4.906404 52.38004 42.970779,...  \n",
       "...                                                  ...  \n",
       "20025  MULTIPOLYGON Z (((4.969713 52.356363 43.013172...  \n",
       "20026  MULTIPOLYGON Z (((4.961306 52.359131 43.008235...  \n",
       "20027  MULTIPOLYGON Z (((4.937427 52.357739 43.010426...  \n",
       "20028  MULTIPOLYGON Z (((4.961306 52.359131 43.008235...  \n",
       "20029  MULTIPOLYGON Z (((4.914985 52.342145 43.037497...  \n",
       "\n",
       "[20030 rows x 15 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e9a4dd3-5737-43a8-b7a9-f2a12b1346a0",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eea2001d-fee9-4950-8f43-bf4dc9a37ec1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "d26916c5-8e8b-4264-ad47-3c0464aeade2",
   "metadata": {},
   "source": [
    "### Identify Popular Neighborhoods Based on Listings Count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "6fce2d16-f5a0-4be1-82ba-c496f964cbc0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>neighbourhood</th>\n",
       "      <th>listing_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>de baarsjes - oud-west</td>\n",
       "      <td>3515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>de pijp - rivierenbuurt</td>\n",
       "      <td>2493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>centrum-west</td>\n",
       "      <td>2326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>centrum-oost</td>\n",
       "      <td>1730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>westerpark</td>\n",
       "      <td>1490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>zuid</td>\n",
       "      <td>1441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>oud-oost</td>\n",
       "      <td>1282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>bos en lommer</td>\n",
       "      <td>1145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>oostelijk havengebied - indische buurt</td>\n",
       "      <td>959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>oud-noord</td>\n",
       "      <td>571</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            neighbourhood  listing_count\n",
       "0                  de baarsjes - oud-west           3515\n",
       "1                 de pijp - rivierenbuurt           2493\n",
       "2                            centrum-west           2326\n",
       "3                            centrum-oost           1730\n",
       "4                              westerpark           1490\n",
       "5                                    zuid           1441\n",
       "6                                oud-oost           1282\n",
       "7                           bos en lommer           1145\n",
       "8  oostelijk havengebied - indische buurt            959\n",
       "9                               oud-noord            571"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Count the number of listings per neighborhood\n",
    "popular_neighborhoods = merged_df['neighbourhood'].value_counts().reset_index()\n",
    "popular_neighborhoods.columns = ['neighbourhood', 'listing_count']\n",
    "\n",
    "# Display top neighborhoods\n",
    "popular_neighborhoods.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "752cd6f5-0fd9-4017-a2c7-2dbe888465ef",
   "metadata": {},
   "source": [
    "### Analyze Popularity by Reviews (Engagement & Demand)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "a4dab799-bc88-4375-9581-78a23eb13f29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>neighbourhood</th>\n",
       "      <th>number_of_reviews</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>centrum-west</td>\n",
       "      <td>76966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>de baarsjes - oud-west</td>\n",
       "      <td>68000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>centrum-oost</td>\n",
       "      <td>49590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>de pijp - rivierenbuurt</td>\n",
       "      <td>48046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>westerpark</td>\n",
       "      <td>28476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>zuid</td>\n",
       "      <td>25349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>oud-oost</td>\n",
       "      <td>21665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>bos en lommer</td>\n",
       "      <td>21031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>oostelijk havengebied - indische buurt</td>\n",
       "      <td>18864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>oud-noord</td>\n",
       "      <td>12381</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             neighbourhood  number_of_reviews\n",
       "5                             centrum-west              76966\n",
       "7                   de baarsjes - oud-west              68000\n",
       "4                             centrum-oost              49590\n",
       "8                  de pijp - rivierenbuurt              48046\n",
       "20                              westerpark              28476\n",
       "21                                    zuid              25349\n",
       "17                                oud-oost              21665\n",
       "2                            bos en lommer              21031\n",
       "14  oostelijk havengebied - indische buurt              18864\n",
       "16                               oud-noord              12381"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Aggregate total number of reviews per neighborhood\n",
    "reviews_per_neighborhood = merged_df.groupby('neighbourhood')['number_of_reviews'].sum().reset_index()\n",
    "reviews_per_neighborhood = reviews_per_neighborhood.sort_values(by='number_of_reviews', ascending=False)\n",
    "\n",
    "# Display top neighborhoods by total reviews\n",
    "reviews_per_neighborhood.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "392e7ef5-98fb-4524-9501-10379afe4039",
   "metadata": {},
   "source": [
    "### Analyze Reviews Per Month (Sustained Popularity)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffa7949f-acbc-461e-89d0-93c0ee8a7147",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "29c9532b-69b1-414c-815c-5358dfaafb19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>neighbourhood</th>\n",
       "      <th>reviews_per_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>bijlmer-centrum</td>\n",
       "      <td>1.583694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>bijlmer-oost</td>\n",
       "      <td>1.362083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>de aker - nieuw sloten</td>\n",
       "      <td>1.357535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>osdorp</td>\n",
       "      <td>1.344654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>gaasperdam - driemond</td>\n",
       "      <td>1.341885</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>centrum-west</td>\n",
       "      <td>1.330374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>centrum-oost</td>\n",
       "      <td>1.161584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>noord-west</td>\n",
       "      <td>1.148000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>geuzenveld - slotermeer</td>\n",
       "      <td>1.085708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>oud-noord</td>\n",
       "      <td>0.991594</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              neighbourhood  reviews_per_month\n",
       "0           bijlmer-centrum           1.583694\n",
       "1              bijlmer-oost           1.362083\n",
       "6    de aker - nieuw sloten           1.357535\n",
       "15                   osdorp           1.344654\n",
       "9     gaasperdam - driemond           1.341885\n",
       "5              centrum-west           1.330374\n",
       "4              centrum-oost           1.161584\n",
       "13               noord-west           1.148000\n",
       "10  geuzenveld - slotermeer           1.085708\n",
       "16                oud-noord           0.991594"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average reviews per month per neighborhood\n",
    "reviews_per_month_neighborhood = merged_df.groupby('neighbourhood')['reviews_per_month'].mean().reset_index()\n",
    "reviews_per_month_neighborhood = reviews_per_month_neighborhood.sort_values(by='reviews_per_month', ascending=False)\n",
    "\n",
    "# Display top neighborhoods by review frequency\n",
    "reviews_per_month_neighborhood.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e1d200d-3cd8-4afd-af13-eb7a804f5c6d",
   "metadata": {},
   "source": [
    "### Price vs. Popularity (Affordability Factor)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "89307564-0e92-4851-ac6b-6e093dbf3128",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>neighbourhood</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>centrum-west</td>\n",
       "      <td>189.920034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>centrum-oost</td>\n",
       "      <td>189.376301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>zuid</td>\n",
       "      <td>171.126995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>ijburg - zeeburgereiland</td>\n",
       "      <td>165.157080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>oud-noord</td>\n",
       "      <td>157.684764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>de pijp - rivierenbuurt</td>\n",
       "      <td>157.178500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>buitenveldert - zuidas</td>\n",
       "      <td>153.087786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>de baarsjes - oud-west</td>\n",
       "      <td>143.849218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>oud-oost</td>\n",
       "      <td>143.398596</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>westerpark</td>\n",
       "      <td>141.004027</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               neighbourhood       price\n",
       "5               centrum-west  189.920034\n",
       "4               centrum-oost  189.376301\n",
       "21                      zuid  171.126995\n",
       "11  ijburg - zeeburgereiland  165.157080\n",
       "16                 oud-noord  157.684764\n",
       "8    de pijp - rivierenbuurt  157.178500\n",
       "3     buitenveldert - zuidas  153.087786\n",
       "7     de baarsjes - oud-west  143.849218\n",
       "17                  oud-oost  143.398596\n",
       "20                westerpark  141.004027"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Average price per neighborhood\n",
    "price_per_neighborhood = merged_df.groupby('neighbourhood')['price'].mean().reset_index()\n",
    "price_per_neighborhood = price_per_neighborhood.sort_values(by='price', ascending=False)\n",
    "\n",
    "# Display top expensive neighborhoods\n",
    "price_per_neighborhood.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "1880a261-2a7c-46c6-9ad1-93cf5e667dd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>availability_365</th>\n",
       "      <th>reviews_per_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>availability_365</th>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.22999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reviews_per_month</th>\n",
       "      <td>0.22999</td>\n",
       "      <td>1.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   availability_365  reviews_per_month\n",
       "availability_365            1.00000            0.22999\n",
       "reviews_per_month           0.22999            1.00000"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df[['availability_365', 'reviews_per_month']].corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecdf1794-b0c1-491a-92b7-fb288011067e",
   "metadata": {},
   "source": [
    "### vPrice Trends by Neighborhood & Popularity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "e2ff8bd1-9d10-4a8d-8e55-edceaaa0ef98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(10,6))\n",
    "sns.scatterplot(data=merged_df, x='price', y='reviews_per_month', hue='neighbourhood')\n",
    "plt.title(\"Price vs. Popularity (Reviews) by Neighborhood\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "931ea7f7-77b7-4055-9f88-bc427a5ed76a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price</th>\n",
       "      <th>security_deposit</th>\n",
       "      <th>cleaning_fee</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>20030.000000</td>\n",
       "      <td>20030.000000</td>\n",
       "      <td>20030.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>152.181178</td>\n",
       "      <td>153.573789</td>\n",
       "      <td>32.156415</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>145.828976</td>\n",
       "      <td>301.000436</td>\n",
       "      <td>26.665581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>96.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>125.000000</td>\n",
       "      <td>90.500000</td>\n",
       "      <td>30.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>175.000000</td>\n",
       "      <td>250.000000</td>\n",
       "      <td>49.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>8500.000000</td>\n",
       "      <td>4736.000000</td>\n",
       "      <td>531.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              price  security_deposit  cleaning_fee\n",
       "count  20030.000000      20030.000000  20030.000000\n",
       "mean     152.181178        153.573789     32.156415\n",
       "std      145.828976        301.000436     26.665581\n",
       "min        0.000000          0.000000      0.000000\n",
       "25%       96.000000          0.000000     10.000000\n",
       "50%      125.000000         90.500000     30.000000\n",
       "75%      175.000000        250.000000     49.000000\n",
       "max     8500.000000       4736.000000    531.000000"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merged_df[['price', 'security_deposit', 'cleaning_fee']].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "827f1056-ca04-4716-95c9-b62c94d4e625",
   "metadata": {},
   "outputs": [],
   "source": [
    "calendar = pd.read_csv(os.path.join(path, 'Data', 'Prepared Data', 'calendar_cleaned.csv'), index_col = False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "a3e24340-7e3e-4501-bcbf-f9fc9286bf6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7310950 entries, 0 to 7310949\n",
      "Data columns (total 5 columns):\n",
      " #   Column      Dtype  \n",
      "---  ------      -----  \n",
      " 0   Unnamed: 0  int64  \n",
      " 1   listing_id  int64  \n",
      " 2   date        object \n",
      " 3   available   object \n",
      " 4   price       float64\n",
      "dtypes: float64(1), int64(2), object(2)\n",
      "memory usage: 278.9+ MB\n"
     ]
    }
   ],
   "source": [
    "calendar.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "f65c2c81-2c3f-4c47-9e5b-d3f95d3801f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 20030 entries, 0 to 20029\n",
      "Data columns (total 15 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   id                 20030 non-null  int64  \n",
      " 1   name               20030 non-null  object \n",
      " 2   neighbourhood      20030 non-null  object \n",
      " 3   room_type          20030 non-null  object \n",
      " 4   price              20030 non-null  int64  \n",
      " 5   number_of_reviews  20030 non-null  int64  \n",
      " 6   reviews_per_month  20030 non-null  float64\n",
      " 7   availability_365   20030 non-null  int64  \n",
      " 8   host_is_superhost  20026 non-null  object \n",
      " 9   property_type      20030 non-null  object \n",
      " 10  bedrooms           20030 non-null  int64  \n",
      " 11  security_deposit   20030 non-null  float64\n",
      " 12  cleaning_fee       20030 non-null  float64\n",
      " 13  Price category     20030 non-null  object \n",
      " 14  geometry_wkt       20030 non-null  object \n",
      "dtypes: float64(3), int64(5), object(7)\n",
      "memory usage: 2.3+ MB\n"
     ]
    }
   ],
   "source": [
    "merged_df.info()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "8e740421-45c7-4300-b8e6-b90400ff4b73",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Convert date to Datetime and Extract Month\n",
    "# Convert date column to datetime format\n",
    "calendar['date'] = pd.to_datetime(calendar['date'])\n",
    "\n",
    "# Extract month\n",
    "calendar['month'] = calendar['date'].dt.month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "2bf5c486-0646-411e-a7b7-725a74a955f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Aggregate Data to Get a Monthly Summary\n",
    "calendar_monthly = calendar.groupby(['listing_id', 'month'])['price'].mean().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "94d3261d-bf61-43f5-96bc-d6ec9f41628e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merge with merged_df\n",
    "\n",
    "merged_df = merged_df.merge(calendar_monthly, left_on='id', right_on='listing_id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "78365fac-9f7a-43c2-b3c0-58c2e07195ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# clean up\n",
    "\n",
    "merged_df.drop(columns=['listing_id'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "2e043721-5396-4654-8bb6-825f4b1a978b",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_df.to_csv(\"airbnb_amsterdam.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92746b5b-7510-4a5d-8d2b-ab26ce2cc29c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
